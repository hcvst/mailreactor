# Copyright (c) 2010 Hans Christian v. Stockhausen
# This file is part of mailreactor.
# See LICENSE for details.

import time
import hashlib
import base64

SECRET = '97303e71573c34af06eb0b7dbffc42e2'

class SRSError(Exception):
    pass

class SRS(object):
    
    def __init__(self, address, hostname):
        if address.startswith('<'):
            address = address[1:]
        if address.endswith('>'):
            address = address[:-1]
        self.address = address
        self.hostname = hostname
        
    def wrap(self):
        if self.address.startswith('SRS0'):
            self._rewrap_SRS0()
        elif self.address.startswith('SRS1'):
            self._rewrap_SRS1()
        else:
            self._wrap()
        return self.address
    
    def _rewrap_SRS0(self):
        # IN : SRS0=HHH=TT=source.com=user@forward.com
        # OUT: SRS1=HHH=forward.com==HHH=TT=source.com=user@bouncer.com
        srs0, host = self.address.split('@')
        srs0 = srs0[4:] # cut of SRS0 but leave the first = (could also be - or +)
        HHH = self._generate_hashcode_from_string(srs0)
        self.address = 'SRS1=%s=%s=%s@%s' % (HHH, host, srs0, self.hostname)
    
    def _rewrap_SRS1(self):
        #IN : SRS1=HHH=forward.com==HHH=TT=source.com=user@bouncer.com
        #OUT: SRS1=HHH=forward.com==HHH=TT=source.com=user@relay.com
        srs1, host = self.address.split('@')
        tokens = srs1.split('=')
        HHH = self._generate_hashcode_from_string("=".join(tokens[3:]))
        self.address = 'SRS1=%s=%s@%s' % (HHH, "=".join(tokens[2:]), self.hostname)
    
    def _wrap(self):
        #IN : user@source.com
        #OUT: SRS0=HHH=TT=source.com=user@forward.com
        user, source = self.address.split('@')
        TT = self._generate_timestamp()
        HHH = self._generate_hashcode(TT, source, user)
        self.address = 'SRS0=%s=%s=%s=%s@%s' % (HHH, TT, source, user, 
            self.hostname)
                  
    def unwrap(self):
        if self.address.startswith('SRS0'):
            self._unwrap_SRS0()
        elif self.address.startswith('SRS1'):
            self._unwrap_SRS1()
        else:
            raise SRSError('Not an SRS address')
        return self.address
    
    def _unwrap_SRS0(self):
        #IN : SRS0=HHH=TT=source.com=user@forward.com
        #OUT: user@source.com
        #SRS0 will always have been generated by ourselves
        srs0, host = self.address.split('@')
        _, HHH, TT, source, user = srs0.split('=')
        if host != self.hostname:
            raise SRSError('This SRS address is not destined for us.')
        elif HHH != self._generate_hashcode(TT, source, user):
            raise SRSError('Hashcode verification failed.')
        elif TT != self._generate_timestamp():
            raise SRSError('Timestamp has expired')
        else:
            self.address = user + '@' + source

    def _unwrap_SRS1(self):
        #IN : SRS1=HHH=forward.com==HHH=TT=source.com=user@somewhere.com
        #OUT: SRS0=HHH=TT=source.com=user@forward.com
        srs1, host = self.address.split('@')
        tokens = srs1.split('=')
        if host != self.hostname:
            raise SRSError('This SRS address is not destined for us.')
        elif tokens[1] != self._generate_hashcode_from_string(
            "=".join(tokens[3:])):
            raise SRSError('Hashcode verification failed.')
        else:
            self.address = 'SRS0%s@%s' % ('='.join(tokens[3:]), tokens[2])
            
    def _generate_hashcode(self, timestamp, hostname, user):
        return self._generate_hashcode_from_string(
            str((timestamp, hostname, user)))
        
    def _generate_hashcode_from_string(self, plaintext, length=3):
        key = hashlib.sha1(plaintext + SECRET).hexdigest()
        return key[:length]
    
    def _generate_timestamp(self, length=2):
        """ 
        The timestamp's resolution is one day, and it is a 10 bit number
        stored as 2 base32 characters.
        """
        return base64.b32encode(str(int(time.time()) / 86400 % 1024))[:length]
    
if __name__ == '__main__':
    #this should be proper tests, instead I just steped through this section
    t1 = SRS('hc@example.co.za', 'mailreactor.co.za')
    sr0 = t1.wrap()
    sr1 = t1.wrap()
    sr2 = t1.wrap()
    sr3 = t1.unwrap()
    sr4 = t1.unwrap()
    #sr5 = t1.unwrap() #raises SRSError as it should
    t2 = SRS('SRS0=123=12=source.com=user@bouncer.com',
        'mailreactor.co.za')
    sr6 = t2.wrap()
    sr7 = t2.unwrap()
    t2 = SRS('SRS0+123+12+source.com+user@bouncer.com',
        'mailreactor.co.za')
    sr8 = t2.wrap()
    sr9 = t2.unwrap()
    
    
    
    